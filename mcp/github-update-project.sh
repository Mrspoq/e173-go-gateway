#!/bin/bash

# Update GitHub project with completed tasks and create new issues

source ../.github_config

echo "Updating E173 Gateway Project Tracker..."
echo "========================================"

# First, let's close the completed UI fix issues and add comments
echo -e "\n1. Updating completed UI fixes..."

# Update Issue #10 - Critical UI Fixes (close it as all are fixed)
cat << 'EOF' | docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN ghcr.io/github/github-mcp-server stdio 2>/dev/null | grep -A50 '"result"' | jq -r '.result.content // .result'
{"jsonrpc": "2.0", "method": "initialize", "params": {"capabilities": {}}, "id": 1}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "create_issue_comment", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "number": 10, "body": "✅ All critical UI fixes have been completed:\n\n- ✅ Fixed gateway authentication - Added proper auth middleware to gateway handler\n- ✅ Fixed customer edit/add buttons - Corrected endpoints and navigation\n- ✅ Fixed dashboard layout - Implemented 5-column grid layout as requested\n- ✅ Fixed authentication display - Unified CurrentUser data across all templates\n- ✅ Added dark theme support to all templates\n\nThese fixes were committed in: 6a5a7c5 (Mission 3 Complete: Database Performance with Redis Caching and Analytics)\n\nClosing this issue as all tasks are complete."}}, "id": 2}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "update_issue", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "number": 10, "state": "closed"}}, "id": 3}
EOF

echo -e "\n2. Creating new issues for pending features..."

# Create issue for WebSocket Real-time Updates
cat << 'EOF' | docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN ghcr.io/github/github-mcp-server stdio 2>/dev/null | grep -A50 '"result"' | jq -r '.result.content // .result'
{"jsonrpc": "2.0", "method": "initialize", "params": {"capabilities": {}}, "id": 1}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "create_issue", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "title": "🔄 Feature: WebSocket Server for Real-time Updates", "body": "# WebSocket Server Implementation\n\n## Overview\nImplement WebSocket server for real-time updates across the platform.\n\n## Requirements\n\n### 1. WebSocket Infrastructure\n- Gorilla WebSocket integration\n- Connection management\n- Authentication via JWT\n- Heartbeat/ping-pong\n- Reconnection handling\n\n### 2. Real-time Features\n- **Dashboard Stats**: Live modem/gateway/customer counts\n- **Active Calls**: Real-time call list with status updates\n- **Balance Updates**: Instant balance changes\n- **Modem Status**: Online/offline notifications\n- **Gateway Health**: Connection status changes\n\n### 3. Event Types\n```go\ntype WSEvent struct {\n    Type    string      `json:\"type\"`\n    Data    interface{} `json:\"data\"`\n    Time    time.Time   `json:\"time\"`\n}\n\n// Event types:\n// - stats.update\n// - call.start\n// - call.end\n// - modem.status\n// - gateway.health\n// - balance.change\n```\n\n### 4. Client Implementation\n- Auto-reconnect logic\n- Event subscription system\n- Efficient DOM updates\n- Connection status indicator\n\n### 5. Performance\n- Connection pooling\n- Message throttling\n- Binary protocol option\n- Compression support\n\n## Acceptance Criteria\n- [ ] WebSocket server running on /ws endpoint\n- [ ] JWT authentication working\n- [ ] Dashboard updates without page refresh\n- [ ] Active calls list updates in real-time\n- [ ] Connection indicator in UI\n- [ ] Graceful degradation if WS fails", "labels": ["enhancement", "feature", "real-time"], "milestone": 1}}, "id": 2}
EOF

# Create issue for SIM Recharge API Integration
cat << 'EOF' | docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN ghcr.io/github/github-mcp-server stdio 2>/dev/null | grep -A50 '"result"' | jq -r '.result.content // .result'
{"jsonrpc": "2.0", "method": "initialize", "params": {"capabilities": {}}, "id": 1}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "create_issue", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "title": "💳 Feature: SIM Recharge API and SMS Integration", "body": "# SIM Recharge API Implementation\n\n## Overview\nComplete the SIM recharge system with API endpoints and SMS processing.\n\n## Requirements\n\n### 1. API Endpoints\n```go\n// Recharge Management\nPOST   /api/recharge/generate    // Generate new codes\nGET    /api/recharge/codes       // List codes with filters\nPOST   /api/recharge/apply       // Apply code to SIM\nGET    /api/recharge/history     // Transaction history\nPOST   /api/recharge/bulk        // Bulk operations\nDELETE /api/recharge/code/:id    // Invalidate code\n```\n\n### 2. SMS Processing\n- Parse incoming recharge SMS\n- Format: *555*[CODE]#\n- Validate code format\n- Apply credit\n- Send confirmation SMS\n\n### 3. Code Generation\n- Configurable formats\n- Batch generation\n- Unique constraints\n- Expiry dates\n- Usage limits\n\n### 4. Security\n- Rate limiting\n- Code encryption\n- Audit logging\n- Fraud detection\n- IP restrictions\n\n### 5. Reporting\n- Usage statistics\n- Revenue tracking\n- Code performance\n- Failed attempts\n- Export capabilities\n\n## Database Schema\n```sql\n-- Already created in migration 009\n-- recharge_codes\n-- recharge_batches  \n-- recharge_history\n```\n\n## Acceptance Criteria\n- [ ] Code generation UI working\n- [ ] SMS recharge processing functional\n- [ ] Batch operations implemented\n- [ ] Security measures in place\n- [ ] Reporting dashboard available\n- [ ] API documentation complete", "labels": ["enhancement", "feature", "billing"], "milestone": 1}}, "id": 2}
EOF

# Create issue for Asterisk AMI Integration
cat << 'EOF' | docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN ghcr.io/github/github-mcp-server stdio 2>/dev/null | grep -A50 '"result"' | jq -r '.result.content // .result'
{"jsonrpc": "2.0", "method": "initialize", "params": {"capabilities": {}}, "id": 1}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "create_issue", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "title": "🔌 Feature: Full Asterisk AMI Integration", "body": "# Asterisk AMI Integration\n\n## Overview\nComplete integration with Asterisk Manager Interface for gateway control.\n\n## Requirements\n\n### 1. AMI Connection Management\n- Connection pooling\n- Auto-reconnect\n- Event filtering\n- Action queuing\n- Response handling\n\n### 2. Gateway Control\n```go\n// Gateway operations via AMI\ntype GatewayAMI interface {\n    TestConnection(gateway *Gateway) error\n    GetChannels(gateway *Gateway) ([]*Channel, error)\n    Originate(gateway *Gateway, params *CallParams) error\n    Hangup(channelID string) error\n    GetPeerStatus(peer string) (*PeerStatus, error)\n    ReloadDialplan() error\n}\n```\n\n### 3. Event Processing\n- NewChannel\n- Hangup\n- Bridge\n- DTMF\n- PeerStatus\n- Registry\n\n### 4. Call Control\n- Originate calls\n- Transfer calls\n- Conference management\n- Call recording control\n- DTMF sending\n\n### 5. Monitoring\n- Real-time peer status\n- Channel statistics\n- Gateway health checks\n- Automatic failover\n- Load balancing\n\n## Implementation Details\n- Use existing AMI library or implement custom\n- Event-driven architecture\n- Goroutine pool for event processing\n- Metrics collection\n- Error recovery\n\n## Acceptance Criteria\n- [ ] AMI connection established\n- [ ] Gateway test button functional\n- [ ] Real-time call monitoring working\n- [ ] Call origination implemented\n- [ ] Event processing stable\n- [ ] Health monitoring active", "labels": ["enhancement", "feature", "asterisk"], "milestone": 1}}, "id": 2}
EOF

echo -e "\n3. Updating project progress summary..."

# Create a comprehensive project update
cat << 'EOF' | docker run -i --rm -e GITHUB_PERSONAL_ACCESS_TOKEN=$GITHUB_TOKEN ghcr.io/github/github-mcp-server stdio 2>/dev/null | grep -A50 '"result"' | jq -r '.result.content // .result'
{"jsonrpc": "2.0", "method": "initialize", "params": {"capabilities": {}}, "id": 1}
{"jsonrpc": "2.0", "method": "tools/call", "params": {"name": "create_issue", "arguments": {"owner": "Mrspoq", "repo": "e173-go-gateway", "title": "📊 Project Status Update - 2025-06-29 15:00 UTC", "body": "# E173 Gateway Project Status Update\n\n## 🎯 Summary\nAll critical UI bugs have been fixed and the platform is stable. The GitHub MCP server has been successfully configured using Docker, enabling proper project management integration.\n\n## ✅ Completed Since Last Update\n\n### UI Fixes (All Verified)\n1. **Dashboard Layout** ✅\n   - Fixed grid to display 5 cards in one row\n   - Redesigned stats cards for better visibility\n   - Implemented proper HTMX partial loading\n\n2. **Gateway Page** ✅\n   - Fixed template error with CurrentUser\n   - Added gateway testing functionality\n   - Implemented proper authentication\n\n3. **Modems Page** ✅\n   - Removed nested boxes issue\n   - Fixed HTMX loading behavior\n   - Improved layout consistency\n\n4. **Customer Management** ✅\n   - Fixed edit/add button endpoints\n   - Corrected authentication redirects\n   - Unified form handling\n\n5. **CDR Display** ✅\n   - Shows table structure when empty\n   - Added proper headers\n   - Improved empty state message\n\n### Infrastructure Improvements\n1. **GitHub MCP Server** ✅\n   - Configured Docker-based official server\n   - Verified all API endpoints working\n   - Created automation scripts\n   - Full toolset access enabled\n\n2. **Database Updates** ✅\n   - Added gateway-modem relationship (migration 008)\n   - Created recharge system schema (migration 009)\n   - Updated sample data scripts\n\n## 🚧 Currently In Progress\n\n### SIM Recharge System (Todo #23)\n- Database schema completed\n- Models created\n- API endpoints pending\n- UI implementation next\n\n## 📋 Pending Tasks (From Todo List)\n\n### High Priority\n- Real-time balance updates (#24)\n- CDR filtering and recordings (#25)\n- Active calls display (#27)\n\n### Medium Priority\n- Merge modems and SIMs sections (#26)\n- Customer prepaid/postpaid types (#28)\n- Customer statistics (ACD/ASR) (#29)\n- Blacklist CSV import (#30)\n\n## 🆕 New Issues Created\n- WebSocket Server for Real-time Updates\n- SIM Recharge API and SMS Integration\n- Full Asterisk AMI Integration\n\n## 📊 Metrics\n- **Total Todos**: 15\n- **Completed**: 8 (53%)\n- **In Progress**: 1 (7%)\n- **Pending**: 6 (40%)\n\n## 🔄 Next Steps\n1. Complete SIM recharge API implementation\n2. Begin WebSocket server setup\n3. Implement gateway management UI\n4. Add real-time dashboard updates\n\n## 🛠️ Technical Notes\n- All UI fixes verified working\n- Authentication flow unified\n- Template inheritance standardized\n- GitHub integration operational\n\n---\n*Updated via GitHub MCP Server*\n*Timestamp: 2025-06-29 15:00:00 UTC*", "labels": ["progress", "status-update"], "milestone": 1}}, "id": 2}
EOF

echo -e "\nProject update complete!"